diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestWindowFilterPushDown.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestWindowFilterPushDown.java
index b0955575c3..3a686145f0 100644
--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestWindowFilterPushDown.java
+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestWindowFilterPushDown.java
@@ -16,11 +16,13 @@ package com.facebook.presto.sql.planner.optimizations;
 import com.facebook.presto.Session;
 import com.facebook.presto.sql.planner.assertions.BasePlanTest;
 import com.facebook.presto.sql.planner.plan.FilterNode;
+import com.facebook.presto.sql.planner.plan.TopNRankNode;
 import com.facebook.presto.sql.planner.plan.TopNRowNumberNode;
 import com.facebook.presto.sql.planner.plan.WindowNode;
 import org.intellij.lang.annotations.Language;
 import org.testng.annotations.Test;
 
+import static com.facebook.presto.SystemSessionProperties.OPTIMIZE_TOP_N_RANK;
 import static com.facebook.presto.SystemSessionProperties.OPTIMIZE_TOP_N_ROW_NUMBER;
 import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;
 import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;
@@ -93,4 +95,67 @@ public class TestWindowFilterPushDown
                 .setSystemProperty(OPTIMIZE_TOP_N_ROW_NUMBER, Boolean.toString(enabled))
                 .build();
     }
+
+    @Test
+    public void testLimitAboveWindowForRank()
+    {
+        @Language("SQL") String sql = "SELECT " +
+                "rank() OVER (PARTITION BY suppkey ORDER BY orderkey) partition_row_number FROM lineitem LIMIT 10";
+
+        assertPlanWithSession(
+                sql,
+                optimizeTopNRank(true),
+                true,
+                anyTree(
+                        limit(10, anyTree(
+                                node(TopNRankNode.class,
+                                        anyTree(
+                                                tableScan("lineitem")))))));
+
+        assertPlanWithSession(
+                sql,
+                optimizeTopNRank(false),
+                true,
+                anyTree(
+                        limit(10, anyTree(
+                                node(WindowNode.class,
+                                        anyTree(
+                                                tableScan("lineitem")))))));
+    }
+
+    @Test
+    public void testFilterAboveWindowForRank()
+    {
+        @Language("SQL") String sql = "SELECT * FROM " +
+                "(SELECT rank() OVER (PARTITION BY suppkey ORDER BY orderkey) partition_row_number FROM lineitem) " +
+                "WHERE partition_row_number < 10";
+
+        assertPlanWithSession(
+                sql,
+                optimizeTopNRowNumber(true),
+                true,
+                anyTree(
+                        anyNot(FilterNode.class,
+                                node(TopNRankNode.class,
+                                        anyTree(
+                                                tableScan("lineitem"))))));
+
+        assertPlanWithSession(
+                sql,
+                optimizeTopNRowNumber(false),
+                true,
+                anyTree(
+                        node(FilterNode.class,
+                                anyTree(
+                                        node(WindowNode.class,
+                                                anyTree(
+                                                        tableScan("lineitem")))))));
+    }
+
+    private Session optimizeTopNRank(boolean enabled)
+    {
+        return Session.builder(this.getQueryRunner().getDefaultSession())
+                .setSystemProperty(OPTIMIZE_TOP_N_RANK, Boolean.toString(enabled))
+                .build();
+    }
 }
